/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ServiceError } from '../model/serviceError';
import { StudentBasicDto } from '../model/studentBasicDto';
import { StudentDto } from '../model/studentDto';
import { Thesis } from '../model/thesis';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StudentControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param idStudent
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(idStudent: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public _delete(idStudent: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public _delete(idStudent: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public _delete(idStudent: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idStudent === null || idStudent === undefined) {
            throw new Error('Required parameter idStudent was null or undefined when calling _delete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('delete',`${this.basePath}/student-api/students/${encodeURIComponent(String(idStudent))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idStudent
     * @param title
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public add(idStudent: number, title: string, observe?: 'body', reportProgress?: boolean): Observable<Thesis>;
    public add(idStudent: number, title: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Thesis>>;
    public add(idStudent: number, title: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Thesis>>;
    public add(idStudent: number, title: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idStudent === null || idStudent === undefined) {
            throw new Error('Required parameter idStudent was null or undefined when calling add.');
        }

        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling add.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (title !== undefined && title !== null) {
            queryParameters = queryParameters.set('title', <any>title);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Thesis>('post',`${this.basePath}/student-api/thesis/${encodeURIComponent(String(idStudent))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public add1(body: StudentDto, observe?: 'body', reportProgress?: boolean): Observable<StudentBasicDto>;
    public add1(body: StudentDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentBasicDto>>;
    public add1(body: StudentDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentBasicDto>>;
    public add1(body: StudentDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling add1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StudentBasicDto>('post',`${this.basePath}/student-api/students`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public all(observe?: 'body', reportProgress?: boolean): Observable<Array<StudentDto>>;
    public all(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StudentDto>>>;
    public all(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StudentDto>>>;
    public all(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        console.log(`${this.basePath}/student-api/students`);

        return this.httpClient.request<Array<StudentDto>>('get',`${this.basePath}/student-api/students`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param role
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public all1(role: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StudentBasicDto>>;
    public all1(role: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StudentBasicDto>>>;
    public all1(role: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StudentBasicDto>>>;
    public all1(role: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (role === null || role === undefined) {
            throw new Error('Required parameter role was null or undefined when calling all1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StudentBasicDto>>('get',`${this.basePath}/student-api/students/roles/${encodeURIComponent(String(role))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param idStudent
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getById(idStudent: number, observe?: 'body', reportProgress?: boolean): Observable<StudentBasicDto>;
    public getById(idStudent: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentBasicDto>>;
    public getById(idStudent: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentBasicDto>>;
    public getById(idStudent: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idStudent === null || idStudent === undefined) {
            throw new Error('Required parameter idStudent was null or undefined when calling getById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StudentBasicDto>('get',`${this.basePath}/student-api/students/${encodeURIComponent(String(idStudent))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public test(name: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StudentBasicDto>>;
    public test(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StudentBasicDto>>>;
    public test(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StudentBasicDto>>>;
    public test(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling test.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StudentBasicDto>>('get',`${this.basePath}/student-api/students/test`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param idStudent
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update(body: StudentDto, idStudent: number, observe?: 'body', reportProgress?: boolean): Observable<StudentBasicDto>;
    public update(body: StudentDto, idStudent: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StudentBasicDto>>;
    public update(body: StudentDto, idStudent: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StudentBasicDto>>;
    public update(body: StudentDto, idStudent: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling update.');
        }

        if (idStudent === null || idStudent === undefined) {
            throw new Error('Required parameter idStudent was null or undefined when calling update.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StudentBasicDto>('put',`${this.basePath}/student-api/students/${encodeURIComponent(String(idStudent))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
